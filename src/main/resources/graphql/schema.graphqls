enum Attendance {
    ATTENDING
    NOT_ATTENDING
    MAYBE
    NO_RESPONSE
}

scalar LocalDate
scalar LocalTime

type Person {
    id: ID!
    email: String!
    first_name: String
    last_name: String
}

type Event {
    id: ID!
    host: Person!
    title: String!
    description: String
    date_of_event: LocalDate!
    time_of_event: LocalTime!
    duration: Int!
    location: String!
    invitations: [Invitation]
}

type Invitation {
    id: ID!
    guest: Person!
    event_id: Int!
    attendance: Attendance!
}

type Response {
    id: Int
    message: String
}

input EventInput {
    id: Int
    host: HostInput!
    title: String!
    description: String
    date_of_event: LocalDate!
    time_of_event: LocalTime!
    duration: Int!
    location: String!
    invitations: [InvitationInput]
}

input InvitationInput {
    id: Int
    guest: GuestInput!
    event_id: Int
    attendance: Attendance
}

input HostInput {
    id: Int!
    email: String
    first_name: String
    last_name: String
}

input GuestInput {
    id: Int
    email: String!
    first_name: String
    last_name: String
}

type Query {
    getAllPersons: [Person]
    getAllEvents: [Event]
    getAllInvitations: [Invitation]
    getPersonById(id: Int): Person
    getPersonByEmail(email: String!): Person
    getEventById(id: Int): Event
    getEventsByHostId(id: Int!): [Event]
    getInvitationById(id: Int): Invitation
    getInvitationsByEventId(id: Int): [Invitation]
    getInvitationsByGuestId(id: Int!): [Invitation]

}

type Mutation {
    setAttendance(attendance: Attendance, invitation_id: Int): Response
    createEvent(input: EventInput): Response
}

schema {
    query: Query
    mutation: Mutation
}